/*
Copyright 2023 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package httpx

import (
	"bytes"
	"fmt"
	"net/http"
	"strconv"
)

// ResponseRecorder is used to record HTTP responses
type ResponseRecorder struct {
	header     http.Header
	body       *bytes.Buffer
	statusCode int
}

// NewResponseRecorder creates a new response recorder
func NewResponseRecorder() *ResponseRecorder {
	return &ResponseRecorder{
		header:     make(http.Header),
		statusCode: http.StatusOK,
	}
}

// Header enables setting headers.
// It implements the http.ResponseWriter interface
func (rr *ResponseRecorder) Header() http.Header {
	return rr.header
}

// Write writes bytes to the body of the response.
// It implements the http.ResponseWriter interface
func (rr *ResponseRecorder) Write(b []byte) (int, error) {
	if rr.body == nil {
		rr.body = &bytes.Buffer{}
	}
	return rr.body.Write(b)
}

// WriteHeader writes the header to the response.
// It implements the http.ResponseWriter interface
func (rr *ResponseRecorder) WriteHeader(statusCode int) {
	rr.statusCode = statusCode
}

// Result returns the response generated by the recorder
func (rr *ResponseRecorder) Result() *http.Response {
	res := &http.Response{
		Proto:      "HTTP/1.1",
		ProtoMajor: 1,
		ProtoMinor: 1,
		StatusCode: rr.statusCode,
		Header:     rr.header,
	}
	res.Status = fmt.Sprintf("%03d %s", res.StatusCode, http.StatusText(res.StatusCode))
	if rr.body != nil {
		res.Body = NewBodyReader(rr.body.Bytes())
		res.ContentLength = int64(rr.body.Len())
	}
	rr.header.Set("Content-Length", strconv.FormatInt(res.ContentLength, 10))
	return res
}

// ContentLength returns the total number of bytes written to the body of the response.
func (rr *ResponseRecorder) ContentLength() int {
	if rr.body != nil {
		return rr.body.Len()
	}
	return 0
}

// StatusCode returns the status code set for the response.
// If unset, the default is http.StatusOK 200.
func (rr *ResponseRecorder) StatusCode() int {
	return rr.statusCode
}

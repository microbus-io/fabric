{{ range .Functions }}
// {{ .Name }}In are the incoming arguments to {{ .Name }}.
type {{ .Name }}In struct {
	{{- range .Signature.InputArgs }}
	{{ CapitalizeIdentifier .Name }} {{ .Type }} `json:"{{ .Name }}"`
	{{- end }}
}

// {{ .Name }}Out are the return values of {{ .Name }}.
type {{ .Name }}Out struct {
	data struct {
		{{- range .Signature.OutputArgs }}
		{{ CapitalizeIdentifier .Name }} {{ .Type }} `json:"{{ .Name }}"`
		{{- end }}
	}
	HTTPResponse *http.Response
	err error
}

// Get retrieves the return values.
func (_out *{{ .Name }}Out) Get() ({{ .Out }}) {
	{{- range .Signature.OutputArgs }}
	{{ .Name }} = _out.data.{{ CapitalizeIdentifier .Name }}
	{{- end }}
	err = _out.err
	return
}

/*
{{ .Description }}
*/
func (_c *Client) {{ .Name }}({{ .In }}) ({{ .Out }}) {
	_in := {{ .Name }}In{
		{{- range .Signature.InputArgs }}
		{{ .Name }},
		{{- end }}
	}
	_body, _err := json.Marshal(_in)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}

	_httpRes, _err := _c.svc.Request(
		ctx,
		pub.Method("POST"),
		pub.URL(sub.JoinHostAndPath(_c.host, `{{ .Path }}`)),
		pub.Body(_body),
		pub.Header("Content-Type", "application/json"),
	)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	var _out {{ .Name }}Out
	_err = json.NewDecoder(_httpRes.Body).Decode(&(_out.data))
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	{{- range .Signature.OutputArgs }}
	{{ .Name }} = _out.data.{{ CapitalizeIdentifier .Name }}
	{{- end }}
	return
}

/*
{{ .Description }}
*/
func (_c *MulticastClient) {{ .Name }}({{ .In }}, _options ...pub.Option) <-chan *{{ .Name }}Out {
	_in := {{ .Name }}In{
		{{- range .Signature.InputArgs }}
		{{ .Name }},
		{{- end }}
	}
	_body, _err := json.Marshal(_in)
	if _err != nil {
		_res := make(chan *{{ .Name }}Out, 1)
		_res <- &{{ .Name }}Out{err: errors.Trace(_err)}
		close(_res)
		return _res
	}

	_opts := []pub.Option{
		pub.Method("POST"),
		pub.URL(sub.JoinHostAndPath(_c.host, `{{ .Path }}`)),
		pub.Body(_body),
		pub.Header("Content-Type", "application/json"),
	}
	_opts = append(_opts, _options...)
	_ch := _c.svc.Publish(ctx, _opts...)

	_res := make(chan *{{ .Name }}Out, cap(_ch))
	go func() {
		for _i := range _ch {
			var _r {{ .Name }}Out
			_httpRes, _err := _i.Get()
			_r.HTTPResponse = _httpRes
			if _err != nil {
				_r.err = errors.Trace(_err)
			} else {
				_err = json.NewDecoder(_httpRes.Body).Decode(&(_r.data))
				if _err != nil {
					_r.err = errors.Trace(_err)
				}
			}
			_res <- &_r
		}
		close(_res)
	}()
	return _res
}
{{ end }}
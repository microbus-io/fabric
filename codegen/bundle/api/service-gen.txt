// Code generated by Microbus. DO NOT EDIT.

package {{ .ShortPackage }}api

import (
	"context"
	"net/http"
	"strings"

	"github.com/microbus-io/fabric/pub"
)

const ServiceName = "{{ .General.Host }}"

// Service is an interface abstraction of a microservice used by the client.
// The connector implements this interface.
type Service interface {
	Request(ctx context.Context, options ...pub.Option) (*http.Response, error)
	Publish(ctx context.Context, options ...pub.Option) <-chan *pub.Response
}

// joinHostAndPath combines the host name and the partial path.
func joinHostAndPath(hostName string, path string) string {
	if path == "" {
		// (empty)
		return "https://" + hostName + ":443"
	}
	if strings.HasPrefix(path, ":") {
		// :1080/path
		return "https://" + hostName + path
	}
	if strings.HasPrefix(path, "/") {
		// /path/with/slash
		return "https://" + hostName + ":443" + path
	}
	if !strings.Contains(path, "://") {
		// path/with/no/slash
		return "https://" + hostName + ":443/" + path
	}
	return path
}

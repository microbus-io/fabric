// Code generated by Microbus. DO NOT EDIT.

package {{ .ShortPackage }}api

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/sub"
)

var (
	_ context.Context
	_ json.Decoder
	_ http.Request
	_ strings.Reader
	_ time.Duration

	_ errors.TracedError
	_ pub.Request
	_ sub.Subscription
)

const ServiceName = "{{ .General.Host }}"

// Service is an interface abstraction of a microservice used by the client.
// The connector implements this interface.
type Service interface {
	Request(ctx context.Context, options ...pub.Option) (*http.Response, error)
	Publish(ctx context.Context, options ...pub.Option) <-chan *pub.Response
}

// Client is an interface to calling the endpoints of the {{ .General.Host }} microservice.
// This simple version is for unicast calls.
type Client struct {
	svc  Service
	host string
}

// NewClient creates a new unicast client to the {{ .General.Host }} microservice.
func NewClient(caller Service) *Client {
	return &Client{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default host name of this client.
func (_c *Client) ForHost(host string) *Client {
	_c.host = host
	return _c
}

// MulticastClient is an interface to calling the endpoints of the {{ .General.Host }} microservice.
// This advanced version is for multicast calls.
type MulticastClient struct {
	svc  Service
	host string
}

// NewMulticastClient creates a new multicast client to the {{ .General.Host }} microservice.
func NewMulticastClient(caller Service) *MulticastClient {
	return &MulticastClient{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default host name of this client.
func (_c *MulticastClient) ForHost(host string) *MulticastClient {
	_c.host = host
	return _c
}

{{- if .Events }}

// MulticastTrigger is an interface to trigger the events of the {{ .General.Host }} microservice.
type MulticastTrigger struct {
	svc  Service
	host string
}

// NewMulticastTrigger creates a new multicast trigger to the {{ .General.Host }} microservice.
func NewMulticastTrigger(caller Service) *MulticastTrigger {
	return &MulticastTrigger{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost replaces the default host name of this trigger.
func (_c *MulticastTrigger) ForHost(host string) *MulticastTrigger {
	_c.host = host
	return _c
}
{{- end}}

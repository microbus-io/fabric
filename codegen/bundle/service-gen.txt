// Code generated by Microbus. DO NOT EDIT.

/*
Package {{ .ShortPackage }} implements the {{ .General.Host }} microservice.
{{- if .General.Description }}

{{ .General.Description }}
{{- end }}
*/
package {{ .ShortPackage }}

import (
	"{{ .Package }}/intermediate"

	"{{ .Package }}/{{ .ShortPackage }}api"
)

var (
	_ {{ .ShortPackage }}api.Client
)

// The default host name of the microservice is {{ .General.Host }}.
const HostName = "{{ .General.Host }}"

// NewService creates a new {{ .General.Host }} microservice.
func NewService() *Service {
	s := &Service{}
	s.Intermediate = intermediate.New(s, Version)
	return s
}

{{- if .Configs }}

type Initializer = intermediate.Initializer

// Config initializers
var (
	{{- range .Configs}}
	// {{ .Name }} initializes the {{ .Name }} config property of the microservice
	{{ .Name }} = intermediate.{{ .Name }}
	{{- end}}
)

/*
With initializes the config properties of the microservice for testings purposes.

	{{ .ShortPackage }}Svc := {{ .ShortPackage }}.NewService().With(...)
*/
func (svc *Service) With(initializers ...Initializer) *Service {
	svc.Intermediate.With(initializers...)
	return svc
}
{{- end }}

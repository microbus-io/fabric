{{ range .Tickers }}
// {{ .Name }}TestCase assists in asserting against the results of executing {{ .Name }}.
type {{ .Name }}TestCase struct {
	t *testing.T
	testName string
	err error
}

// Name sets a name to the test case.
func (tc *{{ .Name }}TestCase) Name(testName string) *{{ .Name }}TestCase {
	tc.testName = testName
	return tc
}

// Error asserts an error.
func (tc *{{ .Name }}TestCase) Error(errContains string) *{{ .Name }}TestCase {
	tc.t.Run(tc.testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *{{ .Name }}TestCase) ErrorCode(statusCode int) *{{ .Name }}TestCase {
	tc.t.Run(tc.testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *{{ .Name }}TestCase) NoError() *{{ .Name }}TestCase {
	tc.t.Run(tc.testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *{{ .Name }}TestCase) Assert(asserter func(t *testing.T, err error)) *{{ .Name }}TestCase {
	tc.t.Run(tc.testName, func(t *testing.T) {
		asserter(t, tc.err)
	})
	return tc
}

// Get returns the result of executing {{ .Name }}.
func (tc *{{ .Name }}TestCase) Get() (err error) {
	return tc.err
}

// {{ .Name }} executes the ticker and returns a corresponding test case.
func {{ .Name }}(t *testing.T, ctx context.Context) *{{ .Name }}TestCase {
	tc := &{{ .Name }}TestCase{t: t}
	tc.err = utils.CatchPanic(func () error {
		return Svc.{{ .Name }}(ctx)
	})
	return tc
}
{{ end }}
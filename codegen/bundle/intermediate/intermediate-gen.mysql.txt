{{- if .Databases.MySQL }}

// mysqlOnStartup opens the connection to the MySQL database and runs schema migrations.
func (svc *Intermediate) mysqlOnStartup(ctx context.Context) (err error) {
    if svc.dbMySQL != nil {
        svc.mysqlOnShutdown(ctx)
    }
    dataSource := svc.{{ .Databases.MySQL }}()
    if dataSource != "" {
        svc.dbMySQL, err = shardedsql.Open("mysql", dataSource)
        if err != nil {
            return errors.Trace(err)
        }
        svc.LogInfo(ctx, "Opened MySQL database", log.String("db", "{{ .Databases.MySQL }}"))
    }
    return nil
}

// mysqlOnStartup closes the connection to the MySQL database.
func (svc *Intermediate) mysqlOnShutdown(ctx context.Context) (err error) {
    if svc.dbMySQL != nil {
        svc.dbMySQL.Close()
        svc.dbMySQL = nil
        svc.LogInfo(ctx, "Closed MySQL database", log.String("db", "{{ .Databases.MySQL }}"))
    }
    return nil
}

// doOnConfigChanged reconnects to MySQL when the data source name changes.
func (svc *Intermediate) mysqlOnConfigChanged(ctx context.Context, changed func(string) bool) (err error) {
    if changed("{{ .Databases.MySQL }}") {
        err = svc.mysqlOnStartup(ctx)
        if err != nil {
            return errors.Trace(err)
        }
    }
    return nil
}

// {{ .Databases.MySQL }} is the data source name to the sharded MySQL database.
func (svc *Intermediate) {{ .Databases.MySQL }}() (dsn string) {
	return svc.Config("{{ .Databases.MySQL }}")
}

// {{ .Databases.MySQL }} initializes the {{ .Databases.MySQL }} config property of the microservice.
func {{ .Databases.MySQL }}(dsn string) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("{{ .Databases.MySQL }}", dsn)
	}
}

// DB{{ .Databases.MySQL }} is the sharded MySQL database.
func (svc *Intermediate) DB{{ .Databases.MySQL }}() *shardedsql.DB {
    return svc.dbMySQL
}
{{ end }}


// doOnConfigChanged is fired when the config of the microservice changed.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) error {
	{{- range .Configs}}{{- if .Callback}}
	if changed(`{{ .Name}}`) {
		err := svc.impl.OnChanged{{ .Name}}(ctx)
		if err != nil {
			return errors.Trace(err)
		}
	}
	{{- end}}{{- end}}
	return nil
}

{{- range .Configs}}

/*
{{ .Description }}
*/
func (svc *Intermediate) {{ .Name }}() ({{ .Out }}) {
	_val := svc.Config(`{{ .Name }}`)
	
	{{- with index .Signature.OutputArgs 0}}

	{{- if eq .Type "string"}}
	return _val{{ end }}
	
	{{- if eq .Type "int"}}
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i){{ end }}
	
	{{- if eq .Type "int64"}}
	_i64, _ := strconv.ParseInt(_val, 10, 64)
	return _i64{{ end }}

	{{- if eq .Type "int32"}}
	_i32, _ := strconv.ParseInt(_val, 10, 32)
	return int32(_i32){{ end }}

	{{- if eq .Type "bool"}}
	_b, _ := strconv.ParseBool(_val)
	return _b{{ end }}

	{{- if eq .Type "time.Duration"}}
	_dur, _ := time.ParseDuration(_val)
	return _dur{{ end }}

	{{- if eq .Type "float"}}
	_f64, _ := time.ParseFloat(_val, 64)
	return _f64{{ end }}

	{{- if eq .Type "float64"}}
	_f64, _ := time.ParseFloat(_val, 64)
	return _f64{{ end }}

	{{- if eq .Type "float32"}}
	_f32, _ := time.ParseFloat(_val, 32)
	return float32(_f32){{ end }}

	{{- end }}
}
{{- end}}

// Initializer initializes a config property of the microservice.
type Initializer func(svc *Intermediate) error

// With initializes the config properties of the microservice for testings purposes.
func (svc *Intermediate) With(initializers ...Initializer) {
	for _, i := range initializers {
		i(svc)
	}
}

{{- range .Configs}}

// {{ .Name }} initializes the "{{ .Name }}" config property of the microservice.
func {{ .Name }}({{ .Out }}) Initializer {
	return func(svc *Intermediate) error{
		return svc.InitConfig(`{{ .Name }}`, fmt.Sprintf("%v", {{ (index .Signature.OutputArgs 0).Name }}))
	}
}
{{- end }}
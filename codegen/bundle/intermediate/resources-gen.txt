// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"crypto/sha256"
	"embed"
	"encoding/hex"
	"mime"
	"net/http"
	"strconv"
	"strings"

	"github.com/microbus-io/fabric/errors"

	"{{ .Package }}/resources"
)

// Resources is the in-memory file system of the embedded resources.
func (svc *Intermediate) Resources() embed.FS {
	return resources.FS
}

// ServeResource serves an embedded resource.
func (svc *Intermediate) ServeResource(w http.ResponseWriter, r *http.Request) (err error) {
	segments := strings.Split(r.URL.Path, "/")
	n := len(segments)
	var body []byte
	for i := n - 1; i >= 0; i-- {
		name := strings.Join(segments[i:], "/")
		body, err = resources.FS.ReadFile(name)
		if err==nil {
			break
		}
	}
	if body == nil {
		w.WriteHeader(http.StatusNotFound)
		return nil
	}

	hash := sha256.New()
	hash.Write(body)
	eTag := hex.EncodeToString(hash.Sum(nil))
	w.Header().Set("ETag", eTag)
	if r.Header.Get("If-None-Match") == eTag {
		w.WriteHeader(http.StatusNotModified)
		return nil
	}

	lastSegment := segments[n-1]
	p := strings.LastIndex(lastSegment, ".")
	if p >= 0 {
        mimeType := mime.TypeByExtension(lastSegment[p:])
        if mimeType != "" {
		    w.Header().Set("Content-Type", mimeType)
        }
	}
	w.Header().Set("Content-Length", strconv.Itoa(len(body)))
	w.Header().Set("Cache-Control", "max-age=3600") // 1 hour

	_, err = w.Write(body)
	return errors.Trace(err)
}


// doOnConfigChanged is called when the config of the microservice changed.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) error {
	{{- range .Configs}}{{ if .Callback}}
	if changed("{{ .Name}}") {
		err := svc.impl.OnChanged{{ .Name}}(ctx)
		if err != nil {
			return errors.Trace(err)
		}
	}
	{{- end}}{{- end}}
	return nil
}

{{- range .Configs}}

/*
{{ .Description }}
*/
func (svc *Intermediate) {{ .Name }}() (
	{{- with index .Signature.OutputArgs 0 }}{{ .Name }} {{ .Type }}{{ end -}}
) {
	_val := svc.Config("{{ .Name }}")
	
	{{- with index .Signature.OutputArgs 0}}

	{{- if eq .Type "string"}}
	return _val{{ end }}
	
	{{- if eq .Type "int"}}
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i){{ end }}
	
	{{- if eq .Type "bool"}}
	_b, _ := strconv.ParseBool(_val)
	return _b{{ end }}

	{{- if eq .Type "time.Duration"}}
	_dur, _ := time.ParseDuration(_val)
	return _dur{{ end }}

	{{- if eq .Type "float64"}}
	_f64, _ := time.ParseFloat(_val, 64)
	return _f64{{ end }}

	{{- end }}
}
{{- end}}

{{ range .Configs}}
// {{ .Name }} initializes the {{ .Name }} config property of the microservice.
func {{ .Name }}(
	{{- with index .Signature.OutputArgs 0 }}{{ .Name }} {{ .Type }}{{ end -}}
) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("{{ .Name }}", fmt.Sprintf("%v", {{ (index .Signature.OutputArgs 0).Name }}))
	}
}
{{ end }}
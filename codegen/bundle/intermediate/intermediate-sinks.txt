{{ range $i, $s := .Sinks}}
// do{{ .Name }} handles marshaling for the {{ .Name }} event sink.
func (svc *Intermediate) do{{ .Name }}(w http.ResponseWriter, r *http.Request) error {
	var i {{ .SourceSuffix }}api{{ $i }}.{{ .Event }}In
	var o {{ .SourceSuffix }}api{{ $i }}.{{ .Event }}Out
	err := utils.ParseRequestData(r, &i)
	if err!=nil {
		return errors.Trace(err)
	}
	// A compilation error here indicates that the signature of the event sink doesn't match that of the event source
	fn := {{ .SourceSuffix }}api{{ $i }}.{{ .Event }}Handler(svc.impl.{{ .Name }})
	{{ range .Signature.OutputArgs }}o.{{ CapitalizeIdentifier .Name }}, {{ end }}err = fn(
		r.Context(),
		{{- range .Signature.InputArgs }}
		i.{{ CapitalizeIdentifier .Name }},
		{{- end}}
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	{{- range .Signature.OutputArgs }}{{ if and (eq .Name "httpStatusCode") (eq .Type "int") }}
	w.WriteHeader(o.{{ CapitalizeIdentifier "httpStatusCode" }})
	{{- end}}{{- end}}
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}
{{ end}}
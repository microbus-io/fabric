// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the {{ .General.Host }} microservice.
{{- if .General.Description }}

{{ .General.Description }}
{{- end }}
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cb"
	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/log"
	"github.com/microbus-io/fabric/shardedsql"
	"github.com/microbus-io/fabric/sub"

	"{{ .Package }}/resources"
	"{{ .Package }}/{{ .PackageSuffix }}api"

	{{- if .Sinks }}
	{{ range $i, $s := .Sinks }}
	{{ .SourceSuffix }}api{{ Add $i 1 }} "{{ .Source }}/{{ .SourceSuffix }}api"
	{{- end}}{{end}}
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cb.Option
	_ cfg.Option
	_ *errors.TracedError
	_ *httpx.ResponseRecorder
	_ *log.Field
	_ *shardedsql.DB
	_ sub.Option
	_ {{ .PackageSuffix }}api.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)

	{{- range .Configs}}{{ if .Callback}}
	OnChanged{{ .Name }}(ctx context.Context) (err error)
	{{- end}}{{- end}}

	{{- range (JoinHandlers .Functions .Sinks)}}
	{{ .Name }}({{ .In }}) ({{ .Out }})
	{{- end}}

	{{- range .Webs}}
	{{ .Name }}(w http.ResponseWriter, r *http.Request) (err error)
	{{- end}}

	{{- range .Tickers}}
	{{ .Name }}(ctx context.Context) (err error)
	{{- end}}
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
	{{- if .Databases.MySQL }}
	dbMySQL *shardedsql.DB
	{{- end }}
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("{{ .General.Host }}"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`{{ .General.Description }}`)
	
	{{- if .Databases.MySQL }}

	// MySQL
	svc.SetOnStartup(svc.mysqlOnStartup)
	svc.SetOnShutdown(svc.mysqlOnShutdown)
	svc.DefineConfig(
		"{{ .Databases.MySQL }}",
		cfg.Description("{{ .Databases.MySQL }} is the connection string to the sharded MySQL database."),
		cfg.Secret(),
	)
	svc.SetOnConfigChanged(svc.mysqlOnConfigChanged)
	{{- end }}

	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)

	{{- if .Configs }}
	
	// Configs
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	{{- range .Configs }}
	svc.DefineConfig(
		"{{ .Name }}",
		{{- if .Description }}
		cfg.Description(`{{ .Description }}`),{{ end }}
		{{- if .Validation }}
		cfg.Validation(`{{ .Validation }}`),{{ end }}
		{{- if .Default }}
		cfg.DefaultValue(`{{ .Default }}`),{{ end }}
		{{- if .Secret }}
		cfg.Secret(),{{ end }}
	)
	{{- end }}{{ end }}

	{{- if .Functions }}
	
	// Functions
	{{- range .Functions }}
	svc.Subscribe(`{{ .Path }}`, svc.do{{ .Name }} {{- if eq .Queue "none"}}, sub.NoQueue(){{end -}} )
	{{- end }}{{ end }}
	
	{{- if .Webs }}
	
	// Webs
	{{- range .Webs }}
	svc.Subscribe(`{{ .Path }}`, svc.impl.{{ .Name }} {{- if eq .Queue "none" }}, sub.NoQueue(){{ end -}} )
	{{- end }}{{ end }}

	{{- if .Sinks }}
	
	// Sinks
	{{- range $i, $s := .Sinks }}
	{{ .SourceSuffix }}api{{ Add $i 1 }}.NewHook(svc).
	{{- if .ForHost }}ForHost(`{{ .ForHost }}`).{{ end }}
	{{- .Event }}(svc.impl.{{ .Name }}
	{{- if eq .Queue "none"}}, sub.NoQueue(){{ end -}}
	)
	{{- end }}{{ end }}

	{{- if .Tickers }}
	
	// Tickers
	{{- range .Tickers }}
	interval{{ .Name }}, _ := time.ParseDuration("{{ .Interval }}")
	{{- if .TimeBudget }}
	timeBudget{{ .Name }}, _ := time.ParseDuration("{{ .TimeBudget }}")
	{{- end }}
	svc.StartTicker("{{ .Name }}", interval{{ .Name }}, svc.impl.{{ .Name }}{{if .TimeBudget }}, cb.TimeBudget(timeBudget{{ .Name }}){{end}})
	{{- end }}{{ end }}

	return svc
}

// Resources is the in-memory file system of the embedded resources.
func (svc *Intermediate) Resources() embed.FS {
	return resources.FS
}

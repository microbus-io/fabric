// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"embed"
	"time"

	"github.com/microbus-io/fabric/cb"
	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"

	"{{ .Package }}/resources"
)

var (
	_ embed.FS
	_ time.Duration

	_ cb.Callback
	_ cfg.Config
	_ errors.TracedError
)

// Intermediate extends and customized the generic base connector.
// Code-generated microservices extend the intermediate service.
type Intermediate struct {
	*connector.Connector
    impl ToDo
}

// New creates a new intermediate service.
func New(impl ToDo) *Intermediate {
	svc := &Intermediate{
        Connector: connector.New("{{ .General.Host }}"),
        impl: impl,
    }

    svc.SetDescription(`{{ .General.Description }}`)
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)
	svc.SetOnConfigChanged(svc.doOnConfigChanged)

    {{- range .Configs}}
	svc.DefineConfig(
		`{{ .Name }}`,
		{{- if .Description }}
		cfg.Description(`{{ TrimEndOfLineWhitespace .Description }}`),{{ end }}
		{{- if .Validation }}
		cfg.Validation(`{{ .Validation }}`),{{ end }}
		{{- if .Default }}
		cfg.DefaultValue(`{{ .Default }}`),{{ end }}
		{{- if .Secret }}
		cfg.Secret(),{{ end }}
	)
    {{- end}}

    {{- range .Functions}}
	svc.Subscribe(`{{ .Path }}`, svc.do{{ .Name }} {{- if eq .Queue "none"}}, sub.NoQueue(){{end -}} )
    {{- end}}
	
    {{- range .Webs}}
	svc.Subscribe(`{{ .Path }}`, svc.impl.{{ .Name }} {{- if eq .Queue "none"}}, sub.NoQueue(){{end -}} )
    {{- end}}

    {{- range .Tickers}}
	interval{{ .Name }}, _ := time.ParseDuration("{{ .Interval }}")
	{{- if .TimeBudget }}
	timeBudget{{ .Name }}, _ := time.ParseDuration("{{ .TimeBudget }}")
	{{- end}}
	svc.StartTicker(`{{ .Name }}`, interval{{ .Name }}, svc.impl.{{ .Name }}{{if .TimeBudget }}, cb.TimeBudget(timeBudget{{ .Name }}){{end}})
    {{- end}}

	return svc
}

// Resources is the in-memory file system of the embedded resources.
func (svc *Intermediate) Resources() embed.FS {
	return resources.FS
}

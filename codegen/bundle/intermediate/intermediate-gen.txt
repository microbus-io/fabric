// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/microbus-io/fabric/cb"
	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/codegen/lib"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/sub"

	"{{ .Package }}/resources"
)

var (
	_ context.Context
	_ embed.FS
	_ json.Decoder
	_ fmt.Stringer
	_ http.Request
	_ strconv.NumError
	_ time.Duration

	_ cb.Callback
	_ cfg.Config
	_ lib.Nothing
	_ errors.TracedError
	_ sub.Option
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)

	{{- range .Configs}}{{- if .Callback}}
	OnChanged{{ .Name }}(ctx context.Context) (err error)
	{{- end}}{{- end}}

	{{- range .Functions}}
	{{ .Name }}(ctx context.Context{{if .In}}, {{end}}{{ .In }}) ({{ .Out }}{{if .Out}}, {{end}}err error)
	{{- end}}

	{{- range .Webs}}
	{{ .Name }}(w http.ResponseWriter, r *http.Request) (err error)
	{{- end}}

	{{- range .Tickers}}
	{{ .Name }}(ctx context.Context) (err error)
	{{- end}}
}

// Intermediate extends and customized the generic base connector.
// Code-generated microservices extend the intermediate service.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// New creates a new intermediate service.
func New(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("{{ .General.Host }}"),
		impl: impl,
	}
	
	svc.SetVersion(version)
	svc.SetDescription(`{{ .General.Description }}`)
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)
	svc.SetOnConfigChanged(svc.doOnConfigChanged)

	{{- range .Configs}}
	svc.DefineConfig(
		`{{ .Name }}`,
		{{- if .Description }}
		cfg.Description(`{{ .Description }}`),{{ end }}
		{{- if .Validation }}
		cfg.Validation(`{{ .Validation }}`),{{ end }}
		{{- if .Default }}
		cfg.DefaultValue(`{{ .Default }}`),{{ end }}
		{{- if .Secret }}
		cfg.Secret(),{{ end }}
	)
	{{- end}}

	{{- range .Functions}}
	svc.Subscribe(`{{ .Path }}`, svc.do{{ .Name }} {{- if eq .Queue "none"}}, sub.NoQueue(){{end -}} )
	{{- end}}
	
	{{- range .Webs}}
	svc.Subscribe(`{{ .Path }}`, svc.impl.{{ .Name }} {{- if eq .Queue "none"}}, sub.NoQueue(){{end -}} )
	{{- end}}

	{{- range .Tickers}}
	interval{{ .Name }}, _ := time.ParseDuration("{{ .Interval }}")
	{{- if .TimeBudget }}
	timeBudget{{ .Name }}, _ := time.ParseDuration("{{ .TimeBudget }}")
	{{- end}}
	svc.StartTicker(`{{ .Name }}`, interval{{ .Name }}, svc.impl.{{ .Name }}{{if .TimeBudget }}, cb.TimeBudget(timeBudget{{ .Name }}){{end}})
	{{- end}}

	return svc
}
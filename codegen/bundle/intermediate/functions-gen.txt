// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"encoding/json"
	"net/http"

	"github.com/microbus-io/fabric/codegen/lib"
	"github.com/microbus-io/fabric/errors"
)

var (
	_ json.Decoder
	_ http.Request
	_ errors.TracedError
	_ lib.Nothing
)

{{- range .Functions}}

// do{{ .Name }} handles marshaling for the "{{ .Name }}" function.
func (svc *Intermediate) do{{ .Name }}(w http.ResponseWriter, r *http.Request) error {
	i := struct {
        {{- range .Signature.InputArgs }}
        I{{ .Name }} {{ .Type }} `json:"{{ .Name }}"`
        {{- end }}
	}{}
	o := struct {
        {{- range .Signature.OutputArgs }}
        O{{ .Name }} {{ .Type }} `json:"{{ if eq .Name "httpStatusCode" }}-{{ else }}{{ .Name }}{{ end }}"`
        {{- end }}
	}{}
	err := lib.ReadFunctionalRequest(r, &i)
	if err!=nil {
		return errors.Trace(err)
	}
    {{ range .Signature.OutputArgs }}o.O{{ .Name }}, {{ end }}err = svc.impl.{{ .Name }}(
		r.Context(),
        {{- range .Signature.InputArgs }}
        i.I{{ .Name }},
        {{- end}}
	)
	if err != nil {
		return errors.Trace(err)
	}

	w.Header().Set("Content-Type", "application/json")
    {{- range .Signature.OutputArgs }}{{ if eq .Name "httpStatusCode" }}{{ if eq .Type "int" }}
    w.WriteHeader(o.OhttpStatusCode)
    {{- end}}{{- end}}{{- end}}
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}
{{- end}}

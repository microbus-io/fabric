// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"net/http"
)

var (
	_ context.Context
	_ http.Request
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
    OnStartup(ctx context.Context) (err error)
    OnShutdown(ctx context.Context) (err error)

	{{- range .Configs}}{{- if .Callback}}
    OnChanged{{ .Name }}(ctx context.Context) (err error)
	{{- end}}{{- end}}

	{{- range .Functions}}
    {{ .Name }}(ctx context.Context{{if .In}}, {{end}}{{ .In }}) ({{ .Out }}{{if .Out}}, {{end}}err error)
	{{- end}}

    {{- range .Webs}}
    {{ .Name }}(w http.ResponseWriter, r *http.Request) (err error)
    {{- end}}

    {{- range .Tickers}}
    {{ .Name }}(ctx context.Context) (err error)
    {{- end}}
}

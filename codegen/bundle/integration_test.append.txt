{{- $pkg := CapitalizeIdentifier .PackageSuffix }}
{{- range (JoinHandlers .Functions .Sinks) }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}(ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }}).
			Name(testName).
			{{- if .Signature.OutputArgs }}
			Expect({{ $t }} {{- range .Signature.OutputArgs }}, {{ .Name }}{{ end }}).
			{{- end }}
			NoError({{ $t }}).
			Error({{ $t }}, errContains).
			ErrorCode({{ $t }}, http.StatusOK).
			Assert({{ $t }}, func({{ $t }}, {{ range .Signature.OutputArgs }}{{ .Name }}, {{ end }}err))
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Events }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}().
			Name(testName).
			Return({{- range .Signature.OutputArgs }}{{ .Name }}, {{ end }}err).
			{{- if .Signature.InputArgs }}
			Expect({{ $t }} {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }}).
			{{- end }}
			Assert({{ $t }}, func({{ $t }}, ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }}))
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Webs }}{{- if not .Exists }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}(ctx, POST(body), ContentType(mime), QueryArg(n, v), Header(n, v)).
			Name(testName).
			StatusOK(t).
			StatusCode(t, statusCode).
			BodyContains(t, bodyContains).
			BodyNotContains(t, bodyNotContains).
			HeaderContains(t, headerName, valueContains).
			NoError(t).
			Error(t, errContains).
			ErrorCode(t, http.StatusOK).
			Assert(t, func(t, httpResponse, err))
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Tickers }}{{ if not .Exists }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}(ctx).
			Name(testName).
			NoError(t).
			Error(t, errContains).
			ErrorCode(t, http.StatusOK).
			Assert(t, err)
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Configs }}{{ if .Callback }}{{ if not .Exists }}
func Test{{ $pkg }}_OnChanged{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test OnChanged{{ .Name }}
	t.Parallel()
	/*
		OnChanged{{ .Name }}(ctx).
			Name(testName).
			NoError(t).
			Error(t, errContains).
			ErrorCode(t, http.StatusOK).
			Assert(t, err)
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}{{ end }}
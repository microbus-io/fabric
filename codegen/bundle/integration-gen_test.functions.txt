{{ range (JoinHandlers .Functions .Sinks) }}
{{- $t := .Signature.TestingT }}
type {{ .Name }}TestCase struct {
	Expect  func({{ $t }} *testing.T {{- range .Signature.OutputArgs }}, {{ .Name }} {{ .Type }}{{ end }})
	Error   func(t *testing.T, errContains string)
	NoError func(t *testing.T)
	Assert  func(t *testing.T, asserter func({{ $t }} *testing.T, {{ .Out }}))
}

func {{ .Name }}({{ .In }}) *{{ .Name }}TestCase {
	tc := &{{ .Name }}TestCase{
		Expect: func({{ $t }} *testing.T {{- range .Signature.OutputArgs }}, _{{ .Name }} {{ .Type }}{{ end }}) {
			{{- range .Signature.OutputArgs }}
			var {{ .Name }} {{ .Type }}
			{{- end }}
			var err error
			err = utils.CatchPanic(func() error {
				{{ range .Signature.OutputArgs }}{{ .Name }}, {{ end }}err = Svc.{{ .Name }}(ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }})
				return err
			})
			{{- if .Signature.OutputArgs }}
			if assert.NoError({{ $t }}, err) {
				{{- range .Signature.OutputArgs }}
				assert.Equal({{ $t }}, _{{ .Name }}, {{ .Name }})
				{{- end}}
			}
			{{- else }}
			assert.NoError(t, err)
			{{- end}}
		},
		Error: func({{ $t }} *testing.T, errContains string) {
			var err error
			err = utils.CatchPanic(func() error {
				{{ range .Signature.OutputArgs }}_, {{ end }}err = Svc.{{ .Name }}(ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }})
				return err
			})
			if assert.Error({{ $t }}, err) {
				assert.Contains({{ $t }}, err.Error(), errContains)
			}
		},
		NoError: func({{ $t }} *testing.T) {
			var err error
			err = utils.CatchPanic(func() error {
				{{ range .Signature.OutputArgs }}_, {{ end }}err = Svc.{{ .Name }}(ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }})
				return err
			})
			assert.NoError({{ $t }}, err)
		},
		Assert: func({{ $t }} *testing.T, asserter func({{ $t }} *testing.T, {{ .Out }})) {
			{{- range .Signature.OutputArgs }}
			var {{ .Name }} {{ .Type }}
			{{- end }}
			var err error
			err = utils.CatchPanic(func() error {
				{{ range .Signature.OutputArgs }}{{ .Name }}, {{ end }}err = Svc.{{ .Name }}(ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }})
				return err
			})
			asserter({{ $t }}, {{ range .Signature.OutputArgs }}{{ .Name }}, {{ end }}err)
		},
	}
	return tc
}
{{ end }}
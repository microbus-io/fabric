
// Mockable is a mockable version of the {{ .General.Host }} microservice.
type Mockable struct {
	*Service

    MockOnStartup func(ctx context.Context) (err error)
    MockOnShutdown func(ctx context.Context) (err error)

	{{- range .Configs}}{{- if .Callback}}
	MockOnChanged{{ .Name }} func(ctx context.Context) (err error)
	{{- end}}{{- end}}

	{{- range (JoinHandlers .Functions .Sinks)}}
	Mock{{ .Name }} func({{ .In }}) ({{ .Out }})
	{{- end}}

	{{- range .Webs}}
	Mock{{ .Name }} func(w http.ResponseWriter, r *http.Request) (err error)
	{{- end}}

	{{- range .Tickers}}
	Mock{{ .Name }} func(ctx context.Context) (err error)
	{{- end}}
}

// NewMockable creates a new mockable version of the {{ .General.Host }} microservice.
func NewMockable() *Mockable {
	m := &Mockable{Service: &Service{}}
	m.Intermediate = intermediate.New(m, Version)
	return m
}

// OnStartup is called when the microservice is started up.
func (m *Mockable) OnStartup(ctx context.Context) (err error) {
	if m.Deployment() != connector.LOCAL && m.Deployment() != connector.TESTINGAPP {
		return errors.Newf("mockable used in '%s' deployment", m.Deployment())
	}
    if m.MockOnStartup != nil {
        return m.MockOnStartup(ctx)
    }
	return m.Service.OnStartup(ctx)
}

// OnShutdown is called when the microservice is shut down.
func (m *Mockable) OnShutdown(ctx context.Context) (err error) {
    if m.MockOnShutdown != nil {
        return m.MockOnShutdown(ctx)
    }
	return m.Service.OnShutdown(ctx)
}
{{/**/}}

{{- range .Configs }}{{- if .Callback }}
// OnChanged{{ .Name }} is triggered when the value of the {{ .Name }} config property changes.
func (m *Mockable) OnChanged{{ .Name }}(ctx context.Context) (err error) {
    if m.MockOnChanged{{ .Name }} != nil {
        return m.MockOnChanged{{ .Name }}(ctx)
    }
	return m.Service.OnChanged{{ .Name }}(ctx)
}
{{ end }}{{ end }}

{{- range (JoinHandlers .Functions .Sinks)}}
/*
{{ .Description }}
*/
func (m *Mockable) {{ .Name }}({{ .In }}) ({{ .Out }}) {
    if m.Mock{{ .Name }} != nil {
        return m.Mock{{ .Name }}(ctx{{ range .Signature.InputArgs }}, {{ .Name }}{{ end }})
    }
	return m.Service.{{ .Name }}(ctx{{ range .Signature.InputArgs }}, {{ .Name }}{{ end }})
}
{{ end }}

{{- range .Webs}}
/*
{{ .Description }}
*/
func (m *Mockable) {{ .Name }}(w http.ResponseWriter, r *http.Request) (err error) {
    if m.Mock{{ .Name }} != nil {
        return m.Mock{{ .Name }}(w, r)
    }
	return m.Service.{{ .Name }}(w, r)
}
{{ end }}

{{- range .Tickers}}
/*
{{ .Description }}
*/
func (m *Mockable) {{ .Name }}(ctx context.Context) (err error) {
    if m.Mock{{ .Name }} != nil {
        return m.Mock{{ .Name }}(ctx)
    }
	return m.Service.{{ .Name }}(ctx)
}
{{- end}}

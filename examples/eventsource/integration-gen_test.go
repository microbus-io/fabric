// Code generated by Microbus. DO NOT EDIT.

package eventsource

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/microbus-io/fabric/application"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/utils"

	"github.com/stretchr/testify/assert"

	"github.com/microbus-io/fabric/examples/eventsource/eventsourceapi"
)

var (
	_ bytes.Buffer
	_ context.Context
	_ fmt.Stringer
	_ io.Reader
	_ *http.Request
	_ os.File
	_ time.Time
	_ strings.Builder
	_ *httpx.BodyReader
	_ pub.Option
	_ utils.InfiniteChan[int]
	_ assert.TestingT
	_ *eventsourceapi.Client
)

var (
	// App manages the lifecycle of the microservices used in the test
	App *application.Application
	// Svc is the eventsource.example microservice being tested
	Svc *Service
)

func TestMain(m *testing.M) {
	var code int

	// Initialize the application
	err := func() error {
		App = application.NewTesting()
		Svc = NewService().(*Service)
		err := Initialize()
		if err != nil {
			return err
		}
		err = App.Startup()
		if err != nil {
			return err
		}
		return nil
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
		code = 19
	}

	// Run the tests
	if err == nil {
		code = m.Run()
	}

	// Terminate the app
	err = func() error {
		var lastErr error
		err = Terminate()
		if err != nil {
			lastErr = err
		}
		err := App.Shutdown()
		if err != nil {
			lastErr = err
		}
		return lastErr
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
	}

	os.Exit(code)
}

// Context creates a new context for a test.
func Context() context.Context {
	return context.Background()
}

// RegisterTestCase assists in asserting against the results of executing Register.
type RegisterTestCase struct {
	allowed bool
	err error

	Expect  func(t *testing.T, allowed bool) *RegisterTestCase
	Error   func(t *testing.T, errContains string) *RegisterTestCase
	NoError func(t *testing.T) *RegisterTestCase
}

// Get returns the result of executing Register.
func (tc *RegisterTestCase) Get() (allowed bool, err error) {
	return tc.allowed, tc.err
}

// Register executes the function and returns a corresponding test case.
func Register(ctx context.Context, email string) *RegisterTestCase {
	tc := &RegisterTestCase{}
	tc.err = utils.CatchPanic(func() error {
		tc.allowed, tc.err = Svc.Register(ctx, email)
		return tc.err
	})
	tc.Expect = func(t *testing.T, allowed bool) *RegisterTestCase {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, allowed, tc.allowed)
		}
		return tc
	}
	tc.Error = func(t *testing.T, errContains string) *RegisterTestCase {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
		return tc
	}
	tc.NoError = func(t *testing.T) *RegisterTestCase {
		assert.NoError(t, tc.err)
		return tc
	}
	return tc
}

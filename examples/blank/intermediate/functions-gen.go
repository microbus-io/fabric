// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"encoding/json"
	"net/http"

	"github.com/microbus-io/fabric/codegen/lib"
	"github.com/microbus-io/fabric/errors"
)

var (
	_ json.Decoder
	_ http.Request

	_ lib.Nothing
	_ errors.TracedError
)

// doMultiply handles marshaling for the "Multiply" function.
func (svc *Intermediate) doMultiply(w http.ResponseWriter, r *http.Request) error {
	i := struct {
        X int `json:"x"`
        Y int `json:"y"`
	}{}
	o := struct {
        Result int `json:"result"`
        HTTPStatusCode int `json:"-"`
	}{}
	err := lib.ReadFunctionalRequest(r, &i)
	if err!=nil {
		return errors.Trace(err)
	}
    o.Result, o.HTTPStatusCode, err = svc.impl.Multiply(
		r.Context(),
        i.X,
        i.Y,
	)
	if err != nil {
		return errors.Trace(err)
	}

	w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(o.HTTPStatusCode)
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// Code generated by Microbus. DO NOT EDIT.

package calculatorapi

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/pub"
)

var (
	_ context.Context
    _ json.Decoder
	_ http.Request
	_ strings.Reader
	_ errors.TracedError
	_ pub.Request
)

const ServiceName = "calculator.example"

// Service is an interface abstraction of a microservice used by the client.
// The connector implements this interface.
type Service interface {
	Request(ctx context.Context, options ...pub.Option) (*http.Response, error)
	Publish(ctx context.Context, options ...pub.Option) <-chan *pub.Response
}

// Client provides type-safe access to the endpoints of the "calculator.example" microservice.
// This simple version is for unicast calls.
type Client struct {
	svc  Service
	host string
}

// NewClient creates a new unicast client to the "calculator.example" microservice.
func NewClient(caller Service) *Client {
	return &Client{
		svc:  caller,
		host: "calculator.example",
	}
}

// ForHost replaces the default host name of this client.
func (_c *Client) ForHost(host string) *Client {
	_c.host = host
	return _c
}

// MulticastClient provides type-safe access to the endpoints of the "calculator.example" microservice.
// This advanced version is for multicast calls.
type MulticastClient struct {
	svc  Service
	host string
}

// NewMulticastClient creates a new multicast client to the "calculator.example" microservice.
func NewMulticastClient(caller Service) *MulticastClient {
	return &MulticastClient{
		svc:  caller,
		host: "calculator.example",
	}
}

// ForHost replaces the default host name of this client.
func (_c *MulticastClient) ForHost(host string) *MulticastClient {
	_c.host = host
	return _c
}

// ArithmeticIn are the incoming arguments to Arithmetic.
type ArithmeticIn struct {
	// x int
	X int `json:"x"`
	// op string
	Op string `json:"op"`
	// y int
	Y int `json:"y"`
}

// ArithmeticOut are the return values of Arithmetic.
type ArithmeticOut struct {
	data struct {
		// xEcho int
		XEcho int `json:"xEcho"`
		// opEcho string
		OpEcho string `json:"opEcho"`
		// yEcho int
		YEcho int `json:"yEcho"`
		// result int
		Result int `json:"result"`
	}
	HTTPResponse *http.Response
	err error
}

// Get retrieves the return values.
func (_out *ArithmeticOut) Get() (result int, err error) {
	result = _out.data.Result
	err = _out.err
	return
}

/*
Arithmetic perform an arithmetic operation between two integers x and y given an operator op.
*/
func (_c *Client) Arithmetic(ctx context.Context, x int, op string, y int) (xEcho int, opEcho string, yEcho int, result int, err error) {
	_in := ArithmeticIn{
		x,
		op,
		y,
	}
	_body, _err := json.Marshal(_in)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}

	_httpRes, _err := _c.svc.Request(
		ctx,
		pub.Method("POST"),
		pub.URL(joinHostAndPath(_c.host, `/arithmetic`)),
		pub.Body(_body),
		pub.Header("Content-Type", "application/json"),
	)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	var _out ArithmeticOut
	_err = json.NewDecoder(_httpRes.Body).Decode(&(_out.data))
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	xEcho = _out.data.XEcho
	opEcho = _out.data.OpEcho
	yEcho = _out.data.YEcho
	result = _out.data.Result
	return
}

/*
Arithmetic perform an arithmetic operation between two integers x and y given an operator op.
*/
func (_c *MulticastClient) Arithmetic(ctx context.Context, x int, op string, y int, _options ...pub.Option) <-chan *ArithmeticOut {
	_in := ArithmeticIn{
		x,
		op,
		y,
	}
	_body, _err := json.Marshal(_in)
	if _err != nil {
		_res := make(chan *ArithmeticOut, 1)
		_res <- &ArithmeticOut{err: errors.Trace(_err)}
		close(_res)
		return _res
	}

	_opts := []pub.Option{
		pub.Method("POST"),
		pub.URL(joinHostAndPath(_c.host, `/arithmetic`)),
		pub.Body(_body),
		pub.Header("Content-Type", "application/json"),
	}
	_opts = append(_opts, _options...)
	_ch := _c.svc.Publish(ctx, _opts...)

	_res := make(chan *ArithmeticOut, cap(_ch))
	go func() {
		for _i := range _ch {
			var _r ArithmeticOut
			_httpRes, _err := _i.Get()
			_r.HTTPResponse = _httpRes
			if _err != nil {
				_r.err = errors.Trace(_err)
			} else {
				_err = json.NewDecoder(_httpRes.Body).Decode(&(_r.data))
				if _err != nil {
					_r.err = errors.Trace(_err)
				}
			}
			_res <- &_r
		}
		close(_res)
	}()
	return _res
}

// SquareIn are the incoming arguments to Square.
type SquareIn struct {
	// x int
	X int `json:"x"`
}

// SquareOut are the return values of Square.
type SquareOut struct {
	data struct {
		// xEcho int
		XEcho int `json:"xEcho"`
		// result int
		Result int `json:"result"`
	}
	HTTPResponse *http.Response
	err error
}

// Get retrieves the return values.
func (_out *SquareOut) Get() (result int, err error) {
	result = _out.data.Result
	err = _out.err
	return
}

/*
Square prints the square of the integer x.
*/
func (_c *Client) Square(ctx context.Context, x int) (xEcho int, result int, err error) {
	_in := SquareIn{
		x,
	}
	_body, _err := json.Marshal(_in)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}

	_httpRes, _err := _c.svc.Request(
		ctx,
		pub.Method("POST"),
		pub.URL(joinHostAndPath(_c.host, `/square`)),
		pub.Body(_body),
		pub.Header("Content-Type", "application/json"),
	)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	var _out SquareOut
	_err = json.NewDecoder(_httpRes.Body).Decode(&(_out.data))
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	xEcho = _out.data.XEcho
	result = _out.data.Result
	return
}

/*
Square prints the square of the integer x.
*/
func (_c *MulticastClient) Square(ctx context.Context, x int, _options ...pub.Option) <-chan *SquareOut {
	_in := SquareIn{
		x,
	}
	_body, _err := json.Marshal(_in)
	if _err != nil {
		_res := make(chan *SquareOut, 1)
		_res <- &SquareOut{err: errors.Trace(_err)}
		close(_res)
		return _res
	}

	_opts := []pub.Option{
		pub.Method("POST"),
		pub.URL(joinHostAndPath(_c.host, `/square`)),
		pub.Body(_body),
		pub.Header("Content-Type", "application/json"),
	}
	_opts = append(_opts, _options...)
	_ch := _c.svc.Publish(ctx, _opts...)

	_res := make(chan *SquareOut, cap(_ch))
	go func() {
		for _i := range _ch {
			var _r SquareOut
			_httpRes, _err := _i.Get()
			_r.HTTPResponse = _httpRes
			if _err != nil {
				_r.err = errors.Trace(_err)
			} else {
				_err = json.NewDecoder(_httpRes.Body).Decode(&(_r.data))
				if _err != nil {
					_r.err = errors.Trace(_err)
				}
			}
			_res <- &_r
		}
		close(_res)
	}()
	return _res
}

// joinHostAndPath combines the host name and the partial path.
func joinHostAndPath(hostName string, path string) string {
	if path == "" {
		// (empty)
		return "https://" + hostName + ":443"
	}
	if strings.HasPrefix(path, ":") {
		// :1080/path
		return "https://" + hostName + path
	}
	if strings.HasPrefix(path, "/") {
		// /path/with/slash
		return "https://" + hostName + ":443" + path
	}
	if !strings.Contains(path, "://") {
		// path/with/no/slash
		return "https://" + hostName + ":443/" + path
	}
	return path
}

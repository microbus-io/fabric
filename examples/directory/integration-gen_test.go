/*
Copyright 2023 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

package directory

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/microbus-io/fabric/application"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/shardedsql"
	"github.com/microbus-io/fabric/utils"

	"github.com/stretchr/testify/assert"

	"github.com/microbus-io/fabric/examples/directory/directoryapi"
)

var (
	_ bytes.Buffer
	_ context.Context
	_ fmt.Stringer
	_ io.Reader
	_ *http.Request
	_ os.File
	_ time.Time
	_ strings.Builder
	_ *connector.Connector
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
	_ *shardedsql.DB
	_ utils.InfiniteChan[int]
	_ assert.TestingT
	_ *directoryapi.Client
)

var (
	sequence int
)

var (
	// App manages the lifecycle of the microservices used in the test
	App *application.Application
	// Svc is the directory.example microservice being tested
	Svc *Service
	// MariaDatabase is a temporary sharded SQL database
	MariaDatabase shardedsql.TestingDB
)

func TestMain(m *testing.M) {
	var code int

	// Initialize the application
	err := func() error {
		var err error
		App = application.NewTesting()
		Svc = NewService().(*Service)
		err = MariaDatabase.Open("mariadb")
		if err != nil {
			return err
		}
		App.With(Maria(MariaDatabase.DataSource()))
		err = Initialize()
		if err != nil {
			return err
		}
		err = App.Startup()
		if err != nil {
			return err
		}
		return nil
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
		code = 19
	}

	// Run the tests
	if err == nil {
		code = m.Run()
	}

	// Terminate the app
	err = func() error {
		var err error
		var lastErr error
		err = Terminate()
		if err != nil {
			lastErr = err
		}
		err = App.Shutdown()
		if err != nil {
			lastErr = err
		}
		err = MariaDatabase.Close()
		if err != nil {
			lastErr = err
		}
		return lastErr
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
	}

	os.Exit(code)
}

// Context creates a new context for a test.
func Context(t *testing.T) context.Context {
	return context.Background()
}

// CreateTestCase assists in asserting against the results of executing Create.
type CreateTestCase struct {
	_t *testing.T
	_testName string
	created *directoryapi.Person
	err error
}

// Name sets a name to the test case.
func (tc *CreateTestCase) Name(testName string) *CreateTestCase {
	tc._testName = testName
	return tc
}

// Expect asserts no error and exact return values.
func (tc *CreateTestCase) Expect(created *directoryapi.Person) *CreateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, created, tc.created)
		}
	})
	return tc
}

// Error asserts an error.
func (tc *CreateTestCase) Error(errContains string) *CreateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *CreateTestCase) ErrorCode(statusCode int) *CreateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *CreateTestCase) NoError() *CreateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *CreateTestCase) Assert(asserter func(t *testing.T, created *directoryapi.Person, err error)) *CreateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		asserter(t, tc.created, tc.err)
	})
	return tc
}

// Get returns the result of executing Create.
func (tc *CreateTestCase) Get() (created *directoryapi.Person, err error) {
	return tc.created, tc.err
}

// Create executes the function and returns a corresponding test case.
func Create(t *testing.T, ctx context.Context, person *directoryapi.Person) *CreateTestCase {
	tc := &CreateTestCase{_t: t}
	tc.err = utils.CatchPanic(func() error {
		tc.created, tc.err = Svc.Create(ctx, person)
		return tc.err
	})
	return tc
}

// LoadTestCase assists in asserting against the results of executing Load.
type LoadTestCase struct {
	_t *testing.T
	_testName string
	person *directoryapi.Person
	ok bool
	err error
}

// Name sets a name to the test case.
func (tc *LoadTestCase) Name(testName string) *LoadTestCase {
	tc._testName = testName
	return tc
}

// Expect asserts no error and exact return values.
func (tc *LoadTestCase) Expect(person *directoryapi.Person, ok bool) *LoadTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, person, tc.person)
			assert.Equal(t, ok, tc.ok)
		}
	})
	return tc
}

// Error asserts an error.
func (tc *LoadTestCase) Error(errContains string) *LoadTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *LoadTestCase) ErrorCode(statusCode int) *LoadTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *LoadTestCase) NoError() *LoadTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *LoadTestCase) Assert(asserter func(t *testing.T, person *directoryapi.Person, ok bool, err error)) *LoadTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		asserter(t, tc.person, tc.ok, tc.err)
	})
	return tc
}

// Get returns the result of executing Load.
func (tc *LoadTestCase) Get() (person *directoryapi.Person, ok bool, err error) {
	return tc.person, tc.ok, tc.err
}

// Load executes the function and returns a corresponding test case.
func Load(t *testing.T, ctx context.Context, key directoryapi.PersonKey) *LoadTestCase {
	tc := &LoadTestCase{_t: t}
	tc.err = utils.CatchPanic(func() error {
		tc.person, tc.ok, tc.err = Svc.Load(ctx, key)
		return tc.err
	})
	return tc
}

// DeleteTestCase assists in asserting against the results of executing Delete.
type DeleteTestCase struct {
	_t *testing.T
	_testName string
	ok bool
	err error
}

// Name sets a name to the test case.
func (tc *DeleteTestCase) Name(testName string) *DeleteTestCase {
	tc._testName = testName
	return tc
}

// Expect asserts no error and exact return values.
func (tc *DeleteTestCase) Expect(ok bool) *DeleteTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, ok, tc.ok)
		}
	})
	return tc
}

// Error asserts an error.
func (tc *DeleteTestCase) Error(errContains string) *DeleteTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *DeleteTestCase) ErrorCode(statusCode int) *DeleteTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *DeleteTestCase) NoError() *DeleteTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *DeleteTestCase) Assert(asserter func(t *testing.T, ok bool, err error)) *DeleteTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		asserter(t, tc.ok, tc.err)
	})
	return tc
}

// Get returns the result of executing Delete.
func (tc *DeleteTestCase) Get() (ok bool, err error) {
	return tc.ok, tc.err
}

// Delete executes the function and returns a corresponding test case.
func Delete(t *testing.T, ctx context.Context, key directoryapi.PersonKey) *DeleteTestCase {
	tc := &DeleteTestCase{_t: t}
	tc.err = utils.CatchPanic(func() error {
		tc.ok, tc.err = Svc.Delete(ctx, key)
		return tc.err
	})
	return tc
}

// UpdateTestCase assists in asserting against the results of executing Update.
type UpdateTestCase struct {
	_t *testing.T
	_testName string
	updated *directoryapi.Person
	ok bool
	err error
}

// Name sets a name to the test case.
func (tc *UpdateTestCase) Name(testName string) *UpdateTestCase {
	tc._testName = testName
	return tc
}

// Expect asserts no error and exact return values.
func (tc *UpdateTestCase) Expect(updated *directoryapi.Person, ok bool) *UpdateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, updated, tc.updated)
			assert.Equal(t, ok, tc.ok)
		}
	})
	return tc
}

// Error asserts an error.
func (tc *UpdateTestCase) Error(errContains string) *UpdateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *UpdateTestCase) ErrorCode(statusCode int) *UpdateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *UpdateTestCase) NoError() *UpdateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *UpdateTestCase) Assert(asserter func(t *testing.T, updated *directoryapi.Person, ok bool, err error)) *UpdateTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		asserter(t, tc.updated, tc.ok, tc.err)
	})
	return tc
}

// Get returns the result of executing Update.
func (tc *UpdateTestCase) Get() (updated *directoryapi.Person, ok bool, err error) {
	return tc.updated, tc.ok, tc.err
}

// Update executes the function and returns a corresponding test case.
func Update(t *testing.T, ctx context.Context, person *directoryapi.Person) *UpdateTestCase {
	tc := &UpdateTestCase{_t: t}
	tc.err = utils.CatchPanic(func() error {
		tc.updated, tc.ok, tc.err = Svc.Update(ctx, person)
		return tc.err
	})
	return tc
}

// LoadByEmailTestCase assists in asserting against the results of executing LoadByEmail.
type LoadByEmailTestCase struct {
	_t *testing.T
	_testName string
	person *directoryapi.Person
	ok bool
	err error
}

// Name sets a name to the test case.
func (tc *LoadByEmailTestCase) Name(testName string) *LoadByEmailTestCase {
	tc._testName = testName
	return tc
}

// Expect asserts no error and exact return values.
func (tc *LoadByEmailTestCase) Expect(person *directoryapi.Person, ok bool) *LoadByEmailTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, person, tc.person)
			assert.Equal(t, ok, tc.ok)
		}
	})
	return tc
}

// Error asserts an error.
func (tc *LoadByEmailTestCase) Error(errContains string) *LoadByEmailTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *LoadByEmailTestCase) ErrorCode(statusCode int) *LoadByEmailTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *LoadByEmailTestCase) NoError() *LoadByEmailTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *LoadByEmailTestCase) Assert(asserter func(t *testing.T, person *directoryapi.Person, ok bool, err error)) *LoadByEmailTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		asserter(t, tc.person, tc.ok, tc.err)
	})
	return tc
}

// Get returns the result of executing LoadByEmail.
func (tc *LoadByEmailTestCase) Get() (person *directoryapi.Person, ok bool, err error) {
	return tc.person, tc.ok, tc.err
}

// LoadByEmail executes the function and returns a corresponding test case.
func LoadByEmail(t *testing.T, ctx context.Context, email string) *LoadByEmailTestCase {
	tc := &LoadByEmailTestCase{_t: t}
	tc.err = utils.CatchPanic(func() error {
		tc.person, tc.ok, tc.err = Svc.LoadByEmail(ctx, email)
		return tc.err
	})
	return tc
}

// ListTestCase assists in asserting against the results of executing List.
type ListTestCase struct {
	_t *testing.T
	_testName string
	keys []directoryapi.PersonKey
	err error
}

// Name sets a name to the test case.
func (tc *ListTestCase) Name(testName string) *ListTestCase {
	tc._testName = testName
	return tc
}

// Expect asserts no error and exact return values.
func (tc *ListTestCase) Expect(keys []directoryapi.PersonKey) *ListTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.NoError(t, tc.err) {
			assert.Equal(t, keys, tc.keys)
		}
	})
	return tc
}

// Error asserts an error.
func (tc *ListTestCase) Error(errContains string) *ListTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *ListTestCase) ErrorCode(statusCode int) *ListTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Equal(t, statusCode, errors.Convert(tc.err).StatusCode)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *ListTestCase) NoError() *ListTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *ListTestCase) Assert(asserter func(t *testing.T, keys []directoryapi.PersonKey, err error)) *ListTestCase {
	tc._t.Run(tc._testName, func(t *testing.T) {
		asserter(t, tc.keys, tc.err)
	})
	return tc
}

// Get returns the result of executing List.
func (tc *ListTestCase) Get() (keys []directoryapi.PersonKey, err error) {
	return tc.keys, tc.err
}

// List executes the function and returns a corresponding test case.
func List(t *testing.T, ctx context.Context) *ListTestCase {
	tc := &ListTestCase{_t: t}
	tc.err = utils.CatchPanic(func() error {
		tc.keys, tc.err = Svc.List(ctx)
		return tc.err
	})
	return tc
}

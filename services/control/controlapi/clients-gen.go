// Code generated by Microbus. DO NOT EDIT.

/*
Package controlapi implements the public API of the control.sys microservice,
including clients and data structures.

This microservice is created for the sake of generating the client API for the :888 control subscriptions.
The microservice itself does nothing and should not be included in applications.
*/
package controlapi

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/sub"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
	_ sub.Option
)

// The default host name addressed by the clients is control.sys.
const HostName = "control.sys"

// Service is an interface abstraction of a microservice used by the client.
// The connector implements this interface.
type Service interface {
	Request(ctx context.Context, options ...pub.Option) (*http.Response, error)
	Publish(ctx context.Context, options ...pub.Option) <-chan *pub.Response
	Subscribe(path string, handler sub.HTTPHandler, options ...sub.Option) error
	Unsubscribe(path string) error
}

// Client is an interface to calling the endpoints of the control.sys microservice.
// This simple version is for unicast calls.
type Client struct {
	svc  Service
	host string
}

// NewClient creates a new unicast client to the control.sys microservice.
func NewClient(caller Service) *Client {
	return &Client{
		svc:  caller,
		host: "control.sys",
	}
}

// ForHost replaces the default host name of this client.
func (_c *Client) ForHost(host string) *Client {
	_c.host = host
	return _c
}

// MulticastClient is an interface to calling the endpoints of the control.sys microservice.
// This advanced version is for multicast calls.
type MulticastClient struct {
	svc  Service
	host string
}

// NewMulticastClient creates a new multicast client to the control.sys microservice.
func NewMulticastClient(caller Service) *MulticastClient {
	return &MulticastClient{
		svc:  caller,
		host: "control.sys",
	}
}

// ForHost replaces the default host name of this client.
func (_c *MulticastClient) ForHost(host string) *MulticastClient {
	_c.host = host
	return _c
}

// PingIn are the input arguments of Ping.
type PingIn struct {
}

// PingOut are the return values of Ping.
type PingOut struct {
	Pong int `json:"pong"`
}

// PingResponse is the response to Ping.
type PingResponse struct {
	data PingOut
	HTTPResponse *http.Response
	err error
}

// Get retrieves the return values.
func (_out *PingResponse) Get() (pong int, err error) {
	pong = _out.data.Pong
	err = _out.err
	return
}

/*
Ping responds to the message with a pong.
*/
func (_c *MulticastClient) Ping(ctx context.Context, _options ...pub.Option) <-chan *PingResponse {
	_in := PingIn{
	}
	_opts := []pub.Option{
		pub.Method("POST"),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:888/ping`)),
		pub.Body(_in),
	}
	_opts = append(_opts, _options...)
	_ch := _c.svc.Publish(ctx, _opts...)

	_res := make(chan *PingResponse, cap(_ch))
	go func() {
		for _i := range _ch {
			var _r PingResponse
			_httpRes, _err := _i.Get()
			_r.HTTPResponse = _httpRes
			if _err != nil {
				_r.err = errors.Trace(_err)
			} else {
				_err = json.NewDecoder(_httpRes.Body).Decode(&(_r.data))
				if _err != nil {
					_r.err = errors.Trace(_err)
				}
			}
			_res <- &_r
		}
		close(_res)
	}()
	return _res
}

// ConfigRefreshIn are the input arguments of ConfigRefresh.
type ConfigRefreshIn struct {
}

// ConfigRefreshOut are the return values of ConfigRefresh.
type ConfigRefreshOut struct {
}

// ConfigRefreshResponse is the response to ConfigRefresh.
type ConfigRefreshResponse struct {
	data ConfigRefreshOut
	HTTPResponse *http.Response
	err error
}

// Get retrieves the return values.
func (_out *ConfigRefreshResponse) Get() (err error) {
	err = _out.err
	return
}

/*
ConfigRefresh pulls the latest config values from the configurator service.
*/
func (_c *MulticastClient) ConfigRefresh(ctx context.Context, _options ...pub.Option) <-chan *ConfigRefreshResponse {
	_in := ConfigRefreshIn{
	}
	_opts := []pub.Option{
		pub.Method("POST"),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:888/config-refresh`)),
		pub.Body(_in),
	}
	_opts = append(_opts, _options...)
	_ch := _c.svc.Publish(ctx, _opts...)

	_res := make(chan *ConfigRefreshResponse, cap(_ch))
	go func() {
		for _i := range _ch {
			var _r ConfigRefreshResponse
			_httpRes, _err := _i.Get()
			_r.HTTPResponse = _httpRes
			if _err != nil {
				_r.err = errors.Trace(_err)
			} else {
				_err = json.NewDecoder(_httpRes.Body).Decode(&(_r.data))
				if _err != nil {
					_r.err = errors.Trace(_err)
				}
			}
			_res <- &_r
		}
		close(_res)
	}()
	return _res
}

/*
Ping responds to the message with a pong.
*/
func (_c *Client) Ping(ctx context.Context) (pong int, err error) {
	_in := PingIn{
	}
	_httpRes, _err := _c.svc.Request(
		ctx,
		pub.Method("POST"),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:888/ping`)),
		pub.Body(_in),
	)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	var _out PingOut
	_err = json.NewDecoder(_httpRes.Body).Decode(&_out)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	pong = _out.Pong
	return
}

/*
ConfigRefresh pulls the latest config values from the configurator service.
*/
func (_c *Client) ConfigRefresh(ctx context.Context) (err error) {
	_in := ConfigRefreshIn{
	}
	_httpRes, _err := _c.svc.Request(
		ctx,
		pub.Method("POST"),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:888/config-refresh`)),
		pub.Body(_in),
	)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	var _out ConfigRefreshOut
	_err = json.NewDecoder(_httpRes.Body).Decode(&_out)
	if _err != nil {
		err = errors.Trace(_err)
		return
	}
	return
}

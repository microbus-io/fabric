// Code generated by Microbus. DO NOT EDIT.

package httpingress

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/microbus-io/fabric/application"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/shardedsql"
	"github.com/microbus-io/fabric/utils"

	"github.com/stretchr/testify/assert"

	"github.com/microbus-io/fabric/services/httpingress/httpingressapi"
)

var (
	_ bytes.Buffer
	_ context.Context
	_ fmt.Stringer
	_ io.Reader
	_ *http.Request
	_ os.File
	_ time.Time
	_ strings.Builder
	_ *httpx.BodyReader
	_ pub.Option
	_ *shardedsql.DB
	_ utils.InfiniteChan[int]
	_ assert.TestingT
	_ *httpingressapi.Client
)

var (
	// App manages the lifecycle of the microservices used in the test
	App *application.Application
	// Svc is the http.ingress.sys microservice being tested
	Svc *Service
)

func TestMain(m *testing.M) {
	var code int

	// Initialize the application
	err := func() error {
		var err error
		App = application.NewTesting()
		Svc = NewService().(*Service)
		err = Initialize()
		if err != nil {
			return err
		}
		err = App.Startup()
		if err != nil {
			return err
		}
		return nil
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
		code = 19
	}

	// Run the tests
	if err == nil {
		code = m.Run()
	}

	// Terminate the app
	err = func() error {
		var err error
		var lastErr error
		err = Terminate()
		if err != nil {
			lastErr = err
		}
		err = App.Shutdown()
		if err != nil {
			lastErr = err
		}
		return lastErr
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
	}

	os.Exit(code)
}

// Context creates a new context for a test.
func Context() context.Context {
	return context.Background()
}

// OnChangedPortsTestCase assists in asserting against the results of executing OnChangedPorts.
type OnChangedPortsTestCase struct {
	testName string
	err error
}

// Name sets a name to the test case.
func (tc *OnChangedPortsTestCase) Name(testName string) *OnChangedPortsTestCase {
	tc.testName = testName
	return tc
}

// Error asserts an error.
func (tc *OnChangedPortsTestCase) Error(t *testing.T, errContains string) *OnChangedPortsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *OnChangedPortsTestCase) NoError(t *testing.T) *OnChangedPortsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *OnChangedPortsTestCase) Assert(t *testing.T, asserter func(t *testing.T, err error)) *OnChangedPortsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		asserter(t, tc.err)
	})
	return tc
}

// Get returns the result of executing Ports.
func (tc *OnChangedPortsTestCase) Get() (err error) {
	return tc.err
}

// OnChangedPorts executes the on changed callback and returns a corresponding test case.
func OnChangedPorts(ctx context.Context) *OnChangedPortsTestCase {
	tc := &OnChangedPortsTestCase{}
	tc.err = utils.CatchPanic(func () error {
		return Svc.OnChangedPorts(ctx)
	})
	return tc
}

// OnChangedAllowedOriginsTestCase assists in asserting against the results of executing OnChangedAllowedOrigins.
type OnChangedAllowedOriginsTestCase struct {
	testName string
	err error
}

// Name sets a name to the test case.
func (tc *OnChangedAllowedOriginsTestCase) Name(testName string) *OnChangedAllowedOriginsTestCase {
	tc.testName = testName
	return tc
}

// Error asserts an error.
func (tc *OnChangedAllowedOriginsTestCase) Error(t *testing.T, errContains string) *OnChangedAllowedOriginsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *OnChangedAllowedOriginsTestCase) NoError(t *testing.T) *OnChangedAllowedOriginsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *OnChangedAllowedOriginsTestCase) Assert(t *testing.T, asserter func(t *testing.T, err error)) *OnChangedAllowedOriginsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		asserter(t, tc.err)
	})
	return tc
}

// Get returns the result of executing AllowedOrigins.
func (tc *OnChangedAllowedOriginsTestCase) Get() (err error) {
	return tc.err
}

// OnChangedAllowedOrigins executes the on changed callback and returns a corresponding test case.
func OnChangedAllowedOrigins(ctx context.Context) *OnChangedAllowedOriginsTestCase {
	tc := &OnChangedAllowedOriginsTestCase{}
	tc.err = utils.CatchPanic(func () error {
		return Svc.OnChangedAllowedOrigins(ctx)
	})
	return tc
}

// OnChangedPortMappingsTestCase assists in asserting against the results of executing OnChangedPortMappings.
type OnChangedPortMappingsTestCase struct {
	testName string
	err error
}

// Name sets a name to the test case.
func (tc *OnChangedPortMappingsTestCase) Name(testName string) *OnChangedPortMappingsTestCase {
	tc.testName = testName
	return tc
}

// Error asserts an error.
func (tc *OnChangedPortMappingsTestCase) Error(t *testing.T, errContains string) *OnChangedPortMappingsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		if assert.Error(t, tc.err) {
			assert.Contains(t, tc.err.Error(), errContains)
		}
	})
	return tc
}

// NoError asserts no error.
func (tc *OnChangedPortMappingsTestCase) NoError(t *testing.T) *OnChangedPortMappingsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		assert.NoError(t, tc.err)
	})
	return tc
}

// Assert asserts using a provided function.
func (tc *OnChangedPortMappingsTestCase) Assert(t *testing.T, asserter func(t *testing.T, err error)) *OnChangedPortMappingsTestCase {
	t.Run(tc.testName, func(t *testing.T) {
		asserter(t, tc.err)
	})
	return tc
}

// Get returns the result of executing PortMappings.
func (tc *OnChangedPortMappingsTestCase) Get() (err error) {
	return tc.err
}

// OnChangedPortMappings executes the on changed callback and returns a corresponding test case.
func OnChangedPortMappings(ctx context.Context) *OnChangedPortMappingsTestCase {
	tc := &OnChangedPortMappingsTestCase{}
	tc.err = utils.CatchPanic(func () error {
		return Svc.OnChangedPortMappings(ctx)
	})
	return tc
}

// Code generated by Microbus. DO NOT EDIT.

/*
Package httpingress implements the http.ingress.sys microservice.

The HTTP Ingress microservice relays incoming HTTP requests to the NATS bus.
*/
package httpingress

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"

	"github.com/microbus-io/fabric/services/httpingress/intermediate"
	"github.com/microbus-io/fabric/services/httpingress/httpingressapi"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ *connector.Connector
	_ errors.TracedError
	_ httpingressapi.Client
)

// The default host name of the microservice is http.ingress.sys.
const HostName = "http.ingress.sys"

// NewService creates a new http.ingress.sys microservice.
func NewService() *Service {
	s := &Service{}
	s.Intermediate = intermediate.New(s, Version)
	return s
}

type Initializer = intermediate.Initializer

// Config initializers
var (
	// TimeBudget initializes the TimeBudget config property of the microservice
	TimeBudget = intermediate.TimeBudget
	// Port initializes the Port config property of the microservice
	Port = intermediate.Port
)

/*
With initializes the config properties of the microservice for testings purposes.

	httpingressSvc := httpingress.NewService().With(...)
*/
func (svc *Service) With(initializers ...Initializer) *Service {
	svc.Intermediate.With(initializers...)
	return svc
}

// Mockable is a mockable version of the http.ingress.sys microservice.
type Mockable struct {
	*Service

    MockOnStartup func(ctx context.Context) (err error)
    MockOnShutdown func(ctx context.Context) (err error)
}

// NewMockable creates a new mockable version of the http.ingress.sys microservice.
func NewMockable() *Mockable {
	m := &Mockable{Service: &Service{}}
	m.Intermediate = intermediate.New(m, Version)
	return m
}

// OnStartup is called when the microservice is started up.
func (m *Mockable) OnStartup(ctx context.Context) (err error) {
	if m.Deployment() != connector.LOCAL && m.Deployment() != connector.TESTINGAPP {
		return errors.Newf("mockable used in '%s' deployment", m.Deployment())
	}
    if m.MockOnStartup != nil {
        return m.MockOnStartup(ctx)
    }
	return m.Service.OnStartup(ctx)
}

// OnShutdown is called when the microservice is shut down.
func (m *Mockable) OnShutdown(ctx context.Context) (err error) {
    if m.MockOnShutdown != nil {
        return m.MockOnShutdown(ctx)
    }
	return m.Service.OnShutdown(ctx)
}


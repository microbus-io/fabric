// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the http.ingress.sys microservice.

The HTTP Ingress microservice relays incoming HTTP requests to the NATS bus.
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cb"
	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/log"
	"github.com/microbus-io/fabric/shardedsql"
	"github.com/microbus-io/fabric/sub"

	"github.com/microbus-io/fabric/services/httpingress/resources"
	"github.com/microbus-io/fabric/services/httpingress/httpingressapi"
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cb.Option
	_ cfg.Option
	_ *errors.TracedError
	_ *httpx.ResponseRecorder
	_ *log.Field
	_ *shardedsql.DB
	_ sub.Option
	_ httpingressapi.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)
	OnChangedPorts(ctx context.Context) (err error)
	OnChangedAllowedOrigins(ctx context.Context) (err error)
	OnChangedPortMappings(ctx context.Context) (err error)
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("http.ingress.sys"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`The HTTP Ingress microservice relays incoming HTTP requests to the NATS bus.`)

	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)
	
	// Configs
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	svc.DefineConfig(
		"TimeBudget",
		cfg.Description(`TimeBudget specifies the timeout for incoming requests.`),
		cfg.Validation(`dur [1s,5m]`),
		cfg.DefaultValue(`20s`),
	)
	svc.DefineConfig(
		"Ports",
		cfg.Description(`Ports is a comma-separated list of HTTP ports on which to listen for incoming requests.`),
		cfg.DefaultValue(`8080`),
	)
	svc.DefineConfig(
		"MaxBodySize",
		cfg.Description(`MaxBodySize specifies the maximum size of the request body, in bytes.`),
		cfg.Validation(`int [1024,]`),
		cfg.DefaultValue(`33554432`),
	)
	svc.DefineConfig(
		"AllowedOrigins",
		cfg.Description(`AllowedOrigins is a comma-separated list of CORS origins to allow requests from.`),
		cfg.DefaultValue(`*`),
	)
	svc.DefineConfig(
		"PortMappings",
		cfg.Description(`PortMappings is a comma-separated list of mappings in the form x:y->z where x is the inbound
HTTP port, y is the requested NATS port, and z is the port to serve.
An incoming HTTP request https://ingresshost:x/servicehost:y/path is mapped to internal NATS
request https://servicehost:z/path .
Both x and y can be * to indicate all ports. Setting z to * indicates to serve the requested
port y without change. Specific rules take precedence over * rules.
The default mapping grants access to all internal ports via HTTP port 8080 but restricts
HTTP ports 443 and 80 to only internal port 443.`),
		cfg.DefaultValue(`8080:*->*, 443:*->443, 80:*->443`),
	)
	svc.DefineConfig(
		"RedirectRoot",
		cfg.Description(`RedirectRoot defines the internal URL to redirect requests to the root path.
The URL must be fully qualified, for example, "https://home.service/welcome-page".`),
	)

	return svc
}

// Resources is the in-memory file system of the embedded resources.
func (svc *Intermediate) Resources() embed.FS {
	return resources.FS
}

// doOnConfigChanged is called when the config of the microservice changes.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) (err error) {
	if changed("Ports") {
		err := svc.impl.OnChangedPorts(ctx)
		if err != nil {
			return errors.Trace(err)
		}
	}
	if changed("AllowedOrigins") {
		err := svc.impl.OnChangedAllowedOrigins(ctx)
		if err != nil {
			return errors.Trace(err)
		}
	}
	if changed("PortMappings") {
		err := svc.impl.OnChangedPortMappings(ctx)
		if err != nil {
			return errors.Trace(err)
		}
	}
	return nil
}

/*
TimeBudget specifies the timeout for incoming requests.
*/
func (svc *Intermediate) TimeBudget() (budget time.Duration) {
	_val := svc.Config("TimeBudget")
	_dur, _ := time.ParseDuration(_val)
	return _dur
}

// TimeBudget initializes the TimeBudget config property of the microservice.
func TimeBudget(budget time.Duration) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("TimeBudget", fmt.Sprintf("%v", budget))
	}
}


/*
Ports is a comma-separated list of HTTP ports on which to listen for incoming requests.
*/
func (svc *Intermediate) Ports() (port string) {
	_val := svc.Config("Ports")
	return _val
}

// Ports initializes the Ports config property of the microservice.
func Ports(port string) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("Ports", fmt.Sprintf("%v", port))
	}
}


/*
MaxBodySize specifies the maximum size of the request body, in bytes.
*/
func (svc *Intermediate) MaxBodySize() (bytes int) {
	_val := svc.Config("MaxBodySize")
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i)
}

// MaxBodySize initializes the MaxBodySize config property of the microservice.
func MaxBodySize(bytes int) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("MaxBodySize", fmt.Sprintf("%v", bytes))
	}
}


/*
AllowedOrigins is a comma-separated list of CORS origins to allow requests from.
*/
func (svc *Intermediate) AllowedOrigins() (origins string) {
	_val := svc.Config("AllowedOrigins")
	return _val
}

// AllowedOrigins initializes the AllowedOrigins config property of the microservice.
func AllowedOrigins(origins string) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("AllowedOrigins", fmt.Sprintf("%v", origins))
	}
}


/*
PortMappings is a comma-separated list of mappings in the form x:y->z where x is the inbound
HTTP port, y is the requested NATS port, and z is the port to serve.
An incoming HTTP request https://ingresshost:x/servicehost:y/path is mapped to internal NATS
request https://servicehost:z/path .
Both x and y can be * to indicate all ports. Setting z to * indicates to serve the requested
port y without change. Specific rules take precedence over * rules.
The default mapping grants access to all internal ports via HTTP port 8080 but restricts
HTTP ports 443 and 80 to only internal port 443.
*/
func (svc *Intermediate) PortMappings() (mappings string) {
	_val := svc.Config("PortMappings")
	return _val
}

// PortMappings initializes the PortMappings config property of the microservice.
func PortMappings(mappings string) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("PortMappings", fmt.Sprintf("%v", mappings))
	}
}


/*
RedirectRoot defines the internal URL to redirect requests to the root path.
The URL must be fully qualified, for example, "https://home.service/welcome-page".
*/
func (svc *Intermediate) RedirectRoot() (toURL string) {
	_val := svc.Config("RedirectRoot")
	return _val
}

// RedirectRoot initializes the RedirectRoot config property of the microservice.
func RedirectRoot(toURL string) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("RedirectRoot", fmt.Sprintf("%v", toURL))
	}
}

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/microbus-io/fabric/cb"
	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/sub"
	"github.com/microbus-io/fabric/utils"

	"github.com/microbus-io/fabric/services/httpingress/resources"
)

var (
	_ context.Context
	_ embed.FS
	_ json.Decoder
	_ fmt.Stringer
	_ http.Request
	_ strconv.NumError
	_ time.Duration

	_ cb.Callback
	_ cfg.Config
	_ errors.TracedError
	_ sub.Option
	_ utils.ResponseRecorder
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)
}

// Intermediate extends and customized the generic base connector.
// Code-generated microservices extend the intermediate service.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// New creates a new intermediate service.
func New(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("http.ingress.sys"),
		impl: impl,
	}
	
	svc.SetVersion(version)
	svc.SetDescription(`The HTTP Ingress microservice relays incoming HTTP requests to the NATS bus.`)
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	svc.DefineConfig(
		`TimeBudget`,
		cfg.Description(`TimeBudget specifies the time out for incoming requests.`),
		cfg.Validation(`dur [1s,5m]`),
		cfg.DefaultValue(`20s`),
	)
	svc.DefineConfig(
		`Port`,
		cfg.Description(`Port is the HTTP port on which to listen for incoming requests.`),
		cfg.Validation(`int [1,65535]`),
		cfg.DefaultValue(`8080`),
	)

	return svc
}

// Resources is the in-memory file system of the embedded resources.
func (svc *Intermediate) Resources() embed.FS {
	return resources.FS
}

// doOnConfigChanged is fired when the config of the microservice changed.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) error {
	return nil
}

/*
TimeBudget specifies the time out for incoming requests.
*/
func (svc *Intermediate) TimeBudget() (budget time.Duration) {
	_val := svc.Config(`TimeBudget`)
	_dur, _ := time.ParseDuration(_val)
	return _dur
}

/*
Port is the HTTP port on which to listen for incoming requests.
*/
func (svc *Intermediate) Port() (port int) {
	_val := svc.Config(`Port`)
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i)
}

// Initializer initializes a config property of the microservice.
type Initializer func(svc *Intermediate) error

// With initializes the config properties of the microservice for testings purposes.
func (svc *Intermediate) With(initializers ...Initializer) {
	for _, i := range initializers {
		i(svc)
	}
}

// TimeBudget initializes the "TimeBudget" config property of the microservice.
func TimeBudget(budget time.Duration) Initializer {
	return func(svc *Intermediate) error{
		return svc.InitConfig(`TimeBudget`, fmt.Sprintf("%v", budget))
	}
}

// Port initializes the "Port" config property of the microservice.
func Port(port int) Initializer {
	return func(svc *Intermediate) error{
		return svc.InitConfig(`Port`, fmt.Sprintf("%v", port))
	}
}
